#!/bin/zsh

# replacing ls with exa
function ls() {
    exa --icons --group-directories-first "$@"
}

# print in formatted bold and colorful
function heading() { 
    echo -e "\e[1m\e[34m==>\e[39m $1\e[0m" 
}

# Igonre if the command throws an error
function ierr() {
    $@ 2> /dev/null
}

# Test whether a given command exists
# Adapted from https://github.com/joshdick/dotfiles/blob/main/zsh.symlink/functions.zsh
function command_exists() {
  hash "$1" &> /dev/null
}

# Packs $2-$n into $1 depending on $1's extension
# Found at <http://pastebin.com/CTra4QTF>
function compress() {
  if [[ $# -lt 2 ]]; then
    echo -e "\n$0() usage:"
    echo -e "\t$0 archive_file_name file1 file2 ... fileN"
    echo -e "\tcreates archive of files 1-N\n"
  else
    DEST=$1
    shift
    case $DEST in
      *.tar.bz2) tar -cvjf $DEST "$@" ;;
      *.tar.gz)  tar -cvzf $DEST "$@" ;;
      *.zip)     zip -r $DEST "$@" ;;
      *)         echo "Unknown file type - $DEST" ;;
    esac
  fi
}

# Extracts archives
# Found at <http://pastebin.com/CTra4QTF>
function extract() {
  case $@ in
    *.tar.bz2) tar -xvjf "$@"  ;;
    *.tar.gz)  tar -xvzf "$@"  ;;
    *.bz2)     bunzip2 "$@"  ;;
    *.rar)     unrar x "$@"  ;;
    *.gz)      gunzip "$@" ;;
    *.tar)     tar xf "$@" ;;
    *.tbz2)    tar -xvjf "$@"  ;;
    *.tgz)     tar -xvzf "$@"  ;;
    *.zip)     unzip "$@"    ;;
    *.xpi)     unzip "$@"    ;;
    *.Z)       uncompress "$@" ;;
    *.7z)      7z x "$@" ;;
    *.ace)     unace e "$@"  ;;
    *.arj)     arj -y e "$@" ;;
    *)         echo "'$@' cannot be extracted via $0()" ;;
  esac
}

# Update the system and its packages.
function update() {
    case "$1" in 
        -s | --system)
            heading "[system] updating macOS..."
            sudo softwareupdate -iR -a
            ;;
        -b | --brew)
            heading "[homebrew] Updating system packages..."
            brew update && brew upgrade --greedy && brew cleanup
            ;;
        -a | --all)
            heading "[homebrew] Updating system packages..."
            brew update && brew upgrade --greedy && brew cleanup
        
            heading "[system] updating macOS..."
            sudo softwareupdate -iR -a
            ;;
        -h | --help)
            echo "Usage: $0 [option...]" >&2
            echo "Options:"
            echo "   -s, --system           update macOS"
            echo "   -b, --brew             update homebrew and intalled packages"
            echo "   -a, --all              update homebrew, installed packages, and macOS"
            echo
            ;;
        -*)
            echo "Error: option $1 does not exist"
            ;;
        *)
            break
            ;;
    esac
}

# For uninstalling apps from outside of AppStore and Homebrew.
function unload_app() {
    mdfind -name $1 | vipe | xargs -L 1 -I {} rm -rf {}
}
   
# clearing dns
function flushdns() {
    sudo dscacheutil -flushcache
    sudo killall -HUP mDNSResponder
}

# opening git remote's url in the browser
function openrepo() {
    if [ -z "$1" ]
    then
        git remote get-url origin | xargs open
    else
        git remote get-url "$1" | xargs open
    fi
}

# login to aws account using aws-vault
function awslogin() {
    local profile=$(aws configure list-profiles | fzf)

    case "$1" in 
        -w | --web)
            aws-vault login "$profile" 
            ;;
        -s | --server | *)
            aws-vault exec "$profile" --prompt=osascript --server
            ;;
        -h | --help)
            echo "Usage: $0 [option...]" >&2
            echo "Options:"
            echo "   -w, --web          login into web console"
            echo "   -s, --server       login using server mode"
            echo
            ;;
        -*)
            echo "Error: option $1 does not exist"
            ;;
    esac
}

# kill the session created by aws-vault
function awslogout() {
    killall -9 aws-vault
    aws-vault clear
}

# cd bookmarks
function cdb() {
    local BOOKMARK_STACK=~/.cdb_bookmarks

    if [ "$1" = "-p" -o "$1" = "--push" ]; then
        grep -q "^$(pwd)$" "$BOOKMARK_STACK" || echo "$(pwd)" >> $BOOKMARK_STACK
    elif [ "$1" = "-e" -o "$1" = "--edit" ]; then
        $EDITOR $BOOKMARK_STACK
    elif [ "$1" = "-d" -o "$1" = "--delete" ]; then
        grep -v "^$(cat "$BOOKMARK_STACK" | fzf)$" "$BOOKMARK_STACK" > "$BOOKMARK_STACK.tmp" && mv "$BOOKMARK_STACK.tmp" "$BOOKMARK_STACK"
    elif [ -z "$1" ]; then
        cd "$(cat "$BOOKMARK_STACK" | fzf)"
    else
        echo "Error: option $1 does not exist"
    fi
}

function bundle() {
    case "$1" in 
        -e | --edit)
            $EDITOR ~/.dotfiles/Brewfile
            ;;
        -i | --install-only)
            brew bundle --file ~/.dotfiles/Brewfile
            ;;
        -u | --uninstall-only)
            brew bundle --force cleanup --file ~/.dotfiles/Brewfile 
            ;;
        -h | --help)
            echo "Usage: $0 [option...]" >&2
            echo "Options:"
            echo "   -e, --edit                 edit the Brewfile"
            echo "   -i, --install-only         only install new packages"
            echo "   -a, --uninstall--only      only uninstall removed packages"
            echo
            ;;
        -*)
            echo "Error: option $1 does not exist"
            ;;
        *)
            brew bundle --force cleanup --file ~/.dotfiles/Brewfile 
            brew bundle --file ~/.dotfiles/Brewfile
            ;;
    esac
}

# adding default arg for source command
function activate() {
    if [ -z "$1"]; then
        source .venv/bin/activate
    else
        source "$@"
    fi
}

# generating memorable random passwords
function mempass() {
    echo "$(diceware -n 2)$((1 + $RANDOM % 9999))"
}
